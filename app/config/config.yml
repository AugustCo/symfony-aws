imports:
    - { resource: parameters.yml }
    - { resource: parameters.php }
    - { resource: security.yml }
    - { resource: services.yml }

framework:
    #esi:             ~
    #translator:      { fallback: "%locale%" }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # FIX SESSIONS: Use PHP Session Handler
        handler_id: session.handler.pdo
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
#        charset:  UTF8
#        debugging: false
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }


services:

    pdo:
        class: PDO
        arguments:
            - "mysql:host=%database_host%;port=%database_port%;dbname=%database_name%"
            - "%database_user%"
            - "%database_password%"
        calls:
            - [setAttribute, [3, 2]] # \PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION

    session.handler.pdo:
        class:     Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler
        arguments: ["@pdo"]



    acme.amazon_s3:
        class: Aws\S3\S3Client
        factory_class: Aws\S3\S3Client
        factory_method:  factory
        arguments:
            -
                key: %amazon.s3.key%
                secret: %amazon.s3.secret%
                region: %amazon.s3.region%


    august.imagine.cache.resolver.amazon_s3:
        class: Liip\ImagineBundle\Imagine\Cache\Resolver\AwsS3Resolver
        arguments:
            - "@acme.amazon_s3"
            - "%amazon.s3.bucket%"
        tags:
            - { name: 'liip_imagine.cache.resolver', resolver: 'media_files' }

    august.imagine.binary.loader.stream.media_files:
        class: "%liip_imagine.binary.loader.stream.class%"
        arguments:
            - 'gaufrette://media_files/'
        tags:
            - { name: 'liip_imagine.binary.loader', loader: 'stream.media_files' }


knp_gaufrette:
    adapters:
        media_files:
            aws_s3:
                service_id: 'acme.amazon_s3'
                bucket_name: 'symfony-aws'
                options:
                    directory: ''
    filesystems:
        media_files:
            adapter: media_files
    stream_wrapper: ~




liip_imagine:
    cache: media_files
    data_loader: stream.media_files

    loaders:
        stream.media_files:
            stream:
                wrapper: gaufrette://media_files/

    resolvers:
       media_files:
          aws_s3:
              client_config:
                  key:    %amazon.s3.key%
                  secret: %amazon.s3.secret%
                  region: %amazon.s3.region%
              bucket:     %amazon.s3.bucket%
              get_options:
                  Scheme: 'https'
              put_options:
                  CacheControl: 'max-age=86400'
    filter_sets:
        cache: ~
        my_thumb:
            quality: 75
            filters:
                thumbnail: { size: [50,50], mode: outbound }
